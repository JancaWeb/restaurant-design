{"version":3,"sources":["App/DynamicImport.js","App/HomePage/load.js","App/Header/styled.js","App/Header/HeaderMobile.js","App/Header/index.js","App/Menu/load.js","App/MainChef/load.js","App/Contacts/load.js","App/Footer/styled.js","App/Footer/index.js","App/index.js","serviceWorker.js","index.js"],"names":["DynamicImport","state","component","this","props","load","then","setState","default","children","React","PureComponent","HomePage","Component","HeaderWrapper","styled","div","HeaderItem","isActive","rest","MobileHeaderItem","DropdownMobileWrapper","ToggleWrapper","ToggleWrapperText","p","NavIcon","mobileHeaderData","link","text","HeaderMobile","useState","isDropdownOpen","activeItem","dropdownData","setDropdownData","handleChangeDropdown","prev","isOpen","toggle","active","size","color","tag","onClick","map","item","i","key","to","Header","withRouter","pathname","location","Menu","MainChef","Contacts","FooterWrapper","FooterText","Footer","GlobalStyles","createGlobalStyle","Boolean","window","hostname","match","ReactDOM","render","path","exact","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6e45c5f.chunk.js","sourcesContent":["import React from 'react';\n\nexport class DynamicImport extends React.PureComponent {\n  state = {\n    component: null\n  }\n  componentDidMount () {\n    this.props.load()\n      .then((component) => {\n        this.setState(() => ({\n          component: component.default ? component.default : component\n        }))\n      })\n  }\n  render() {\n    return this.props.children(this.state.component)\n  }\n}","import React from 'react';\n\nimport { DynamicImport } from '../DynamicImport';\n\nexport const HomePage = (props) => (\n  <DynamicImport load={() => import('../HomePage')}>\n      {(Component) => Component === null\n      ? <p>Loading</p>\n      : <Component {...props} />}\n   </DynamicImport>\n)","import React from 'react';\nimport styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const HeaderWrapper = styled.div`\n  background-color: #000;\n  color: #d4d2cf;\n  font-family: 'Open Sans Condensed';\n  padding: 1rem;\n  @media(min-width: 640px) {\n    padding: 2rem;\n  }\n`;\n\nexport const HeaderItem = styled(({ isActive, ...rest }) => <NavLink {...rest} />)`\n  display: none;\n  @media(min-width: 640px) {\n    display: inline-block;\n    font-size: 1.5rem;\n    color: ${props => props.isActive ? '#fff' : 'inherit'};\n    padding-bottom: 0.5rem;\n    border-bottom: 3px solid ${props => props.isActive ? '#fff' : '#d4d2cf'};\n    text-decoration: none;\n    margin: 0 2rem;\n    letter-spacing: 0.1em;\n    &:hover {\n      color: #fff;\n      text-decoration: none;\n    }\n  }\n`;\n\nexport const MobileHeaderItem = styled(({ isActive, ...rest }) => <NavLink {...rest} />)`\n  display: block;\n  text-decoration: none;\n  color: inherit;\n  padding: 1rem;\n  margin: -1rem 0;\n  background-color: #000;\n  color: #fff;\n  font-size: 1.5rem;\n  &:hover {\n    color: #fff;\n  }\n`;\n\nexport const DropdownMobileWrapper = styled.div`\n  display: block;\n  @media(min-width: 640px) {\n    display: none;\n  }\n`;\n\nexport const ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const ToggleWrapperText = styled.p`\n  font-size: 1.5rem;\n`;\n\nexport const NavIcon = styled.div`\n  margin: 1em;\n  width: 30px;\n\n  &:after, &:before, div {\n    background-color: #fff;\n    border-radius: 3px;\n    content: '';\n    display: block;\n    height: 3px;\n    margin: 4px 0;\n  }\n`;","import React from \"react\";\nimport Dropdown from \"reactstrap/lib/Dropdown\";\nimport DropdownMenu from \"reactstrap/lib/DropdownMenu\";\nimport DropdownToggle from \"reactstrap/lib/DropdownToggle\";\n\nimport {\n  MobileHeaderItem,\n  DropdownMobileWrapper,\n  ToggleWrapper,\n  ToggleWrapperText,\n  NavIcon\n} from \"./styled\";\n\nconst mobileHeaderData = [\n  {\n    link: \"/restaurant-design/\",\n    text: \"Главная\"\n  },\n  {\n    link: \"/restaurant-design/menu\",\n    text: \"Меню\"\n  },\n  {\n    link: \"/restaurant-design/main-chef\",\n    text: \"Шеф-повар\"\n  },\n  {\n    link: \"/restaurant-design/contacts\",\n    text: \"Контактная информация\"\n  }\n];\n\nexport const HeaderMobile = () => {\n  const [dropdownData, setDropdownData] = React.useState({\n    isDropdownOpen: false,\n    activeItem: \"Главная\"\n  });\n\n  const handleChangeDropdown = activeItem => () =>\n    setDropdownData(prev => ({\n      isDropdownOpen: !prev.isDropdownOpen,\n      activeItem\n    }));\n\n  return (\n    <DropdownMobileWrapper>\n      <Dropdown\n        isOpen={dropdownData.isDropdownOpen}\n        toggle={handleChangeDropdown}\n        active={true}\n        size=\"lg\"\n      >\n        <DropdownToggle color=\"primary\" tag=\"span\">\n          <ToggleWrapper onClick={handleChangeDropdown(dropdownData.activeItem)}>\n            <ToggleWrapperText>{dropdownData.activeItem}</ToggleWrapperText>\n            <NavIcon>\n              <div />\n            </NavIcon>\n          </ToggleWrapper>\n        </DropdownToggle>\n        <DropdownMenu>\n          {mobileHeaderData.map(\n            (item, i) =>\n              item.text !== dropdownData.activeItem && (\n                <MobileHeaderItem\n                  key={i}\n                  to={item.link}\n                  onClick={handleChangeDropdown(item.text)}\n                >\n                  {item.text}\n                </MobileHeaderItem>\n              )\n          )}\n        </DropdownMenu>\n      </Dropdown>\n    </DropdownMobileWrapper>\n  );\n};\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { HeaderMobile } from './HeaderMobile';\nimport { \n  HeaderWrapper,\n  HeaderItem\n} from './styled';\n\nconst HeaderComponent = ({location: { pathname }}) => {\n\n\n  return (\n    <HeaderWrapper>\n      <HeaderMobile />\n      <HeaderItem to=\"/restaurant-design/\" isActive={pathname === '/restaurant-design/'}>Главная</HeaderItem>\n      <HeaderItem to=\"/restaurant-design/menu\" isActive={pathname === '/restaurant-design/menu'}>Меню</HeaderItem>\n      <HeaderItem to=\"/restaurant-design/main-chef\" isActive={pathname === '/restaurant-design/main-chef'}>Шеф-повар</HeaderItem>\n      <HeaderItem to=\"/restaurant-design/contacts\" isActive={pathname === '/restaurant-design/contacts'}>Контактная информация</HeaderItem>\n    </HeaderWrapper>\n  )\n};\n\nexport const Header = withRouter(HeaderComponent);\n","import React from 'react';\n\nimport { DynamicImport } from '../DynamicImport';\n\nexport const Menu = (props) => (\n  <DynamicImport load={() => import('../Menu')}>\n      {(Component) => Component === null\n      ? <p>Loading</p>\n      : <Component {...props} />}\n   </DynamicImport>\n)","import React from 'react';\n\nimport { DynamicImport } from '../DynamicImport';\n\nexport const MainChef = (props) => (\n  <DynamicImport load={() => import('../MainChef')}>\n      {(Component) => Component === null\n      ? <p>Loading</p>\n      : <Component {...props} />}\n   </DynamicImport>\n)","import React from 'react';\n\nimport { DynamicImport } from '../DynamicImport';\n\nexport const Contacts = (props) => (\n  <DynamicImport load={() => import('../Contacts')}>\n      {(Component) => Component === null\n      ? <p>Loading</p>\n      : <Component {...props} />}\n   </DynamicImport>\n)","import styled from 'styled-components';\n\nexport const FooterWrapper = styled.div`\n  padding: 1rem;\n  color: #fff;\n  background-color: #000;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n`;\n\nexport const FooterText = styled.p`\n  font-size: 1rem;\n  @media(min-width: 640px) {\n    font-size: 1.5rem;\n  }\n`;","import React from 'react';\n\nimport { \n  FooterWrapper,\n  FooterText\n} from './styled';\n\nexport const Footer = () => (\n  <FooterWrapper>\n    <div>\n      <FooterText>Site designed by JancaWeb | &copy;</FooterText>\n      <FooterText>Images used for presentational purposes, write to janca.jake@gmail.com for removal</FooterText>\n    </div>\n  </FooterWrapper>\n)","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { createGlobalStyle } from \"styled-components\";\n\nimport { HomePage } from './HomePage/load';\nimport { Header } from './Header';\nimport { Menu } from './Menu/load';\nimport { MainChef } from './MainChef/load';\nimport { Contacts } from './Contacts/load';\nimport { Footer } from './Footer';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    @import url('https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300&display=swap');\n    @import url('https://fonts.googleapis.com/css?family=IBM+Plex+Serif&display=swap');\n    font-family: 'Open Sans Condensed', sans-serif;\n    font-size: 16px;\n    margin: 0;\n  }\n\n  p {\n    margin: 0;\n  }\n`\n\nexport const App = () => (\n  <BrowserRouter>\n    <GlobalStyles />\n    <Header />\n    <Route path=\"/restaurant-design/\" exact component={HomePage} />\n    <Route path=\"/restaurant-design/contacts\" component={Contacts}/>\n    <Route path=\"/restaurant-design/menu\" exact component={Menu} />\n    <Route path=\"/restaurant-design/main-chef\" exact component={MainChef} />\n    <Footer />\n  </BrowserRouter>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}